continue
"abc".split(".")
@@tables['messages'].selectivity('messages.read', '=', '1')
@@tables['messages'].selectivity('read', '=', '1')
@@conditions
continue
@@tables['messages'].selectivity('read', '=', '0')
@@tables['messages'].selectivity('read', '=', '1')
@@tables['messages'].selectivity('read', '=', '124124')
@@tables['messages'].selectivity('read', '=', 'zxcvzxcv')
@@tables['messages'].selectivity('read', '=', 'adfsdf')
@@tables['messages'].selectivity('read', '=', '0')
@@tables['messages'].selectivity('read', '=', '1')
continue
@@tables['messages'].attributes['read'].stats.most_common_vals.sort == ['f','t']
@@tables['messages'].attributes['read'].stats.most_common_vals
@@tables['messages'].attributes['read']
@@tables['messages'].selectivity('read', '=', 'f')
@@tables['messages'].selectivity('read', '=', 't')
@@tables['messages'].selectivity('read', '=', '0')
@@tables['messages'].selectivity('read', '=', '1')
@@tables['messages']
continue
@@conditions.each{|t,h| h.each{|c,(a,b)| puts a>1}}
@@conditions.each{|t,h| h.each{|c,(a,b)| puts b>1}}
@@conditions.each{|t,h| puts h}
@conditions.each{|t,h| puts h}
@conditions.each do |table, hsh|
ap @@conditions
continue
ap @@conditions
continue
ap @@conditions
continue
require 'ap'
require 'awesome_print'
ap @@conditions
@@conditions
continue
next
esc_val
next
val
continue
val
continue
PgQuery.parse("SELECT * FROM x WHERE x.a IS TRUE").simple_where_conditions
PgQuery::Version
PgQuery.version
PgQuery.verison
val
continue
@@conditions.values.map(&:keys).flatten(1).map{|a,b,c| @@tables['messages'].selectivity(a,b,c)}
@@conditions.values.map(&:keys).flatten(1).map{|a,b,c| table.selectivity(a,b,c)}
@@conditions.values.map(&:keys).flatten(1).map{|a,b,c| tbl.selectivity(a,b,c)}
@@conditions.values.map(&:keys).flatten(1).map{|a,b,c| table.selectivity(a,b,c)}
continue
reload!
@@conditions.values.map(&:keys).flatten(1).map{|a,b,c| table.selectivity(a,b,c)}
@@conditions.values.map(&:keys).flatten(1)
@@conditions.values.map(&:keys)
@@conditions.values.map(&:keys).flatten
@@conditions.values.map(&:keys)
@@conditions.values
@@conditions
continue
table
tbl.attributes["read"]
tbl.attributes["read"].keys
tbl.attributes["read"]
tbl.attributes["read"].stats.most_common_vals
tbl.attributes["read"].stats
tbl.attributes["read"].attribute_stats
tbl.attributes["read"].most_common_vals["f"]
tbl.attributes["read"]
tbl.attributes.keys
tbl.selectivity("read", "IS", true)
tbl.selectivity("read", "IS", "TRUE")
tbl.selectivity(query.simple_where_conditions)
tbl.selectivity(**query.simple_where_conditions)
tbl.selectivity(*query.simple_where_conditions)
*query.simple_where_conditions
query.simple_where_conditions
tbl = Pardex::Table.new(Message)
Message
table.selectivity("read", "IS", "TRUE")
table
table.selectivity(*["read", "IS", "TRUE"])
table.selectivity(["read", "IS", "TRUE"])
query.simple_where_conditions
query = PgQuery.parse(QUERIES[1])
query.simple_where_conditions
query.simple_where_condition
query = PgQuery.parse(QUERIES[0])
table.class
ls
@@tables
