exit
queries.count
continue
queries.count
exit
continue
parsed_tables
continue
exit
"SELECT * FROM \"roles\" WHERE (name = ?) LIMIT ?"[0..5]
"SELECT * FROM \"roles\" WHERE (name = ?) LIMIT ?"[0..5
"SELECT * FROM \"roles\" WHERE (name = ?) LIMIT ?"[0..7]
ap queries_with_stats[0..18]
ap queries_with_stats
require 'awesome_print'
require 'awesome_print
queries_with_stats
exit
continue
parsed_tables
continue
parsed_tables
@@table_names
continue
@@table_names
parsed_tables
continue
parsed_tables
continue
parsed_tables
continue
parsed_tables
continue
parsed_tables
continue
parsed_tables
continue
parsed_tables
continue
@@tables
@@table_names.get(2)
@@table_names.second
@@table_names.first
@@table_names[0]
parsed_tables
continue
@@table_names.include?("user_accounts")
@@table_names.include?(:user_accounts)
@@table_names.length
@@tables.keys
@@conditions
continue
Set.new([:a, :b]).intersect?(Set.new([:c, :a, :b]))
Set.new([:a, :b]).intersect?(Set.new([:c, :b]))
Set.new([:a, :b]).intersect?(Set.new([:c]))
Set.new([:a, :b]).intersect?([:c])
@@conditions
queries.count
queries
continue
row_result
next
statistics.length
statistics[0]
statistics
step
table
Pardex::Table.new(table, connection)
@@conditions
connection.class
@@tables[table]
table
step
table
step
@@tables[table]
@@tables
next
parsed_tables.select{|t| !@@tables.include?(t)}
parsed_tables
continue
a.include?(:z)
a.include?(:a)
a.contains?(:a)
a = Set.new([:a, :b])
Set.new([:a, :b])
continue
puts cond
tables
@@tables["company_lists"].
@@tables["company_lists"].attributes
    tables.select{|t| @@tables[t].attributes.keys.include?(cond[0]) }.first
tables
continue
puts cond
cond
    tables.select{|t| @@tables[t].attributes.keys.include?(cond[0]) }.first
@@tables["subscriptions_user_accounts"].attributes.keys.count
@@tables["subscriptions_user_accounts"].attributes.count
tables
@@tables["subscription_user_accounts"].attributes.count
@@tables["subscriptions"].attributes.keys.count
@@tables["subscriptions"].attributes.count
@@tables["subscriptions"]
tables
continue
ap QUERIES_WITH_STATS
ap @@conditions.select{|k,v| v.count > 0}
a = _
@@conditions.select{|k,v| v.count > 0}
require 'awesome_print'
ap _
@@conditions.select{|k,v| v.count > 0}
@@conditions
continue
ap @@conditions.select{|k,v| v.length > 0}
require 'awesome_print'
ap @@conditions.select{|k,v| v.length > 0}
@@conditions.select{|k,v| v.length > 0}
@@conditions
continue
a[0]
a = open(log_file).readlines;
log_file
continue
