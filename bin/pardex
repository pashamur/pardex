#!/usr/bin/env ruby

require_relative "../lib/pardex.rb"
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: pardex [options]"

  opts.on("-lNAME", "--log-file=NAME", "Specify location of postgres log file"){|v| options[:log_file] = v }
  opts.on("-dNAME", "--db-name=NAME", "Specify database name"){|v| options[:db_name] = v }
  opts.on("-hNAME", "--db-host=NAME", "Specify database host"){|v| options[:db_host] = v }
  opts.on("-pNAME", "--db-port=NAME", "Specify database port"){|v| options[:db_port] = v.to_i }
  opts.on("-uNAME", "--db-username=NAME", "Specify database username"){|v| options[:db_user] = v }
  opts.on("-PNAME", "--db-password=NAME", "Specify database password"){|v| options[:db_password] = v }
  opts.on("-cNAME", "--min-count=NAME", "Minimum number of queries for a condition to be considered for a partial index (default: 2)"){|v| options[:min_count] = v.to_i }
  opts.on("-e", "--evaluate", "Whether to run index evaluation on each resulting index"){|v| options[:evaluate] = 1 }
  opts.on("-f", "--filter-id", "Filter out suggestions on likely id columns (matching _id or .id or ^id$)"){|v| options[:filter_id] = 1 }
end.parse!

defaults = {
  :log_file => "/usr/local/var/postgres/pg_log/ps_sample.log",
  :db_name => "development_pasha",
  :db_host => "localhost",
  :db_port => 5432,
  :db_user => "pashamur",
  :db_password => nil
}

Pardex.run(defaults.merge(options))
